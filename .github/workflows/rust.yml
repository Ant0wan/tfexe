name: Rust

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    branches:
      - main

permissions: write-all

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: cargo fmt --all -- --check
  lint:
    needs: [format]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: cargo clippy --all-targets --all-features -- -D clippy::pedantic
  build:
    #needs: [format, lint]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-gnu
            os: windows-latest
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
              #            env:
              #              CC_aarch64_unknown_linux_musl: clang
              #              AR_aarch64_unknown_linux_musl: llvm-ar
              #              CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_RUSTFLAGS: "-Clink-self-contained=yes -Clinker=rust-lld"
              # - target: aarch64-apple-darwin
              #   os: macos-latest
    steps:
    - uses: actions/checkout@v3
    - run: rustup target add ${{ matrix.target }}
    - run: |
      export AR_aarch64_unknown_linux_musl=llvm-ar
      export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_RUSTFLAGS=-Clink-self-contained=yes -Clinker=rust-lld
      export CC_aarch64_unknown_linux_musl=clang
    - if: "!startsWith(github.ref, 'refs/tags/')"
      run: cargo build --verbose --target=${{ matrix.target }}
    - if: startsWith(github.ref, 'refs/tags/')
      run: cargo build --release --target=${{ matrix.target }}
    - if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v3
      with:
        name: tfexe_${{ matrix.target }}
        path: target/${{ matrix.target }}/release/tfexe
  test:
    needs: [format, lint, build]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-gnu
            os: windows-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
              # - target: aarch64-apple-darwin
              #   os: macos-latest
    steps:
    - uses: actions/checkout@v3
    - run: rustup target add ${{ matrix.target }}
    - run: cargo test --verbose --all --target=${{ matrix.target }}
      env: ${{ matrix.env }}
  release:
    needs: [format, lint, test, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-pc-windows-gnu, x86_64-apple-darwin, aarch64-apple-darwin, x86_64-unknown-linux-musl, aarch64-unknown-linux-gnu]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: tfexe_${{ matrix.target }}
        path: tfexe_${{ matrix.target }}
    - run: gh release create ${GITHUB_REF#refs/*/} --generate-notes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - run: gh release upload ${GITHUB_REF#refs/*/} tfexe_${{ matrix.target }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

